{"version":3,"file":"react-tooltip.min.mjs","sources":["../src/utils/handle-style.ts","../src/utils/debounce.ts","../src/components/TooltipProvider/TooltipProvider.tsx","../src/components/TooltipProvider/TooltipWrapper.tsx","../src/utils/use-isomorphic-layout-effect.ts","../src/utils/get-scroll-parent.ts","../src/utils/compute-positions.ts","../src/utils/deep-equal.ts","../src/components/Tooltip/Tooltip.tsx","../src/utils/css-time-to-ms.ts","../src/components/TooltipContent/TooltipContent.tsx","../src/utils/css-supports.ts","../src/components/TooltipController/TooltipController.tsx","../src/index.tsx"],"sourcesContent":["// This is the ID for the core styles of ReactTooltip\nconst REACT_TOOLTIP_CORE_STYLES_ID = 'react-tooltip-core-styles'\n// This is the ID for the visual styles of ReactTooltip\nconst REACT_TOOLTIP_BASE_STYLES_ID = 'react-tooltip-base-styles'\n\nconst injected = {\n  core: false,\n  base: false,\n}\n\nfunction injectStyle({\n  css,\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n  type = 'base',\n  ref,\n}: {\n  css: string\n  id?: string\n  type?: 'core' | 'base'\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref?: any\n}) {\n  if (!css || typeof document === 'undefined' || injected[type]) {\n    return\n  }\n\n  if (\n    type === 'core' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_CORE_STYLES\n  ) {\n    return\n  }\n\n  if (\n    type !== 'base' &&\n    typeof process !== 'undefined' && // this validation prevents docs from breaking even with `process?`\n    process?.env?.REACT_TOOLTIP_DISABLE_BASE_STYLES\n  ) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  if (!ref) {\n    // eslint-disable-next-line no-param-reassign\n    ref = {}\n  }\n  const { insertAt } = ref\n\n  if (document.getElementById(id)) {\n    // this should never happen because of `injected[type]`\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[react-tooltip] Element with id '${id}' already exists. Call \\`removeStyle()\\` first`,\n      )\n    }\n    return\n  }\n\n  const head = document.head || document.getElementsByTagName('head')[0]\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const style: any = document.createElement('style')\n  style.id = id\n  style.type = 'text/css'\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild)\n    } else {\n      head.appendChild(style)\n    }\n  } else {\n    head.appendChild(style)\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css\n  } else {\n    style.appendChild(document.createTextNode(css))\n  }\n\n  injected[type] = true\n}\n\n/**\n * @deprecated Use the `disableStyleInjection` tooltip prop instead.\n * See https://react-tooltip.com/docs/examples/styling#disabling-reacttooltip-css\n */\nfunction removeStyle({\n  type = 'base',\n  id = REACT_TOOLTIP_BASE_STYLES_ID,\n}: {\n  type?: 'core' | 'base'\n  id?: string\n} = {}) {\n  if (!injected[type]) {\n    return\n  }\n\n  if (type === 'core') {\n    // eslint-disable-next-line no-param-reassign\n    id = REACT_TOOLTIP_CORE_STYLES_ID\n  }\n\n  const style = document.getElementById(id)\n  if (style?.tagName === 'style') {\n    style?.remove()\n  } else if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `[react-tooltip] Failed to remove 'style' element with id '${id}'. Call \\`injectStyle()\\` first`,\n    )\n  }\n\n  injected[type] = false\n}\n\nexport { injectStyle, removeStyle }\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * This function debounce the received function\n * @param { function } \tfunc\t\t\t\tFunction to be debounced\n * @param { number } \t\twait\t\t\t\tTime to wait before execut the function\n * @param { boolean } \timmediate\t\tParam to define if the function will be executed immediately\n */\nconst debounce = <T, A extends any[]>(\n  func: (...args: A) => void,\n  wait?: number,\n  immediate?: boolean,\n) => {\n  let timeout: NodeJS.Timeout | null = null\n\n  const debounced = function debounced(this: T, ...args: A): void {\n    const later = () => {\n      timeout = null\n      if (!immediate) {\n        func.apply(this, args)\n      }\n    }\n\n    if (immediate && !timeout) {\n      /**\n       * there's not need to clear the timeout\n       * since we expect it to resolve and set `timeout = null`\n       */\n      func.apply(this, args)\n      timeout = setTimeout(later, wait)\n    }\n\n    if (!immediate) {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n      timeout = setTimeout(later, wait)\n    }\n  }\n\n  debounced.cancel = () => {\n    if (!timeout) {\n      return\n    }\n    clearTimeout(timeout)\n    timeout = null\n  }\n\n  return debounced\n}\n\nexport default debounce\n","import React, {\n  createContext,\n  PropsWithChildren,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react'\n\nimport type {\n  AnchorRef,\n  TooltipContextData,\n  TooltipContextDataWrapper,\n} from './TooltipProviderTypes'\n\nconst DEFAULT_TOOLTIP_ID = 'DEFAULT_TOOLTIP_ID'\nconst DEFAULT_CONTEXT_DATA: TooltipContextData = {\n  anchorRefs: new Set(),\n  activeAnchor: { current: null },\n  attach: () => {\n    /* attach anchor element */\n  },\n  detach: () => {\n    /* detach anchor element */\n  },\n  setActiveAnchor: () => {\n    /* set active anchor */\n  },\n}\n\nconst DEFAULT_CONTEXT_DATA_WRAPPER: TooltipContextDataWrapper = {\n  getTooltipData: () => DEFAULT_CONTEXT_DATA,\n}\n\nconst TooltipContext = createContext<TooltipContextDataWrapper>(DEFAULT_CONTEXT_DATA_WRAPPER)\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipProvider: React.FC<PropsWithChildren<void>> = ({ children }) => {\n  const [anchorRefMap, setAnchorRefMap] = useState<Record<string, Set<AnchorRef>>>({\n    [DEFAULT_TOOLTIP_ID]: new Set(),\n  })\n  const [activeAnchorMap, setActiveAnchorMap] = useState<Record<string, AnchorRef>>({\n    [DEFAULT_TOOLTIP_ID]: { current: null },\n  })\n\n  const attach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId] ?? new Set()\n      refs.forEach((ref) => tooltipRefs.add(ref))\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: new Set(tooltipRefs) }\n    })\n  }\n\n  const detach = (tooltipId: string, ...refs: AnchorRef[]) => {\n    setAnchorRefMap((oldMap) => {\n      const tooltipRefs = oldMap[tooltipId]\n      if (!tooltipRefs) {\n        // tooltip not found\n        // maybe thow error?\n        return oldMap\n      }\n      refs.forEach((ref) => tooltipRefs.delete(ref))\n      // create new object to trigger re-render\n      return { ...oldMap }\n    })\n  }\n\n  const setActiveAnchor = (tooltipId: string, ref: React.RefObject<HTMLElement>) => {\n    setActiveAnchorMap((oldMap) => {\n      if (oldMap[tooltipId]?.current === ref.current) {\n        return oldMap\n      }\n      // create new object to trigger re-render\n      return { ...oldMap, [tooltipId]: ref }\n    })\n  }\n\n  const getTooltipData = useCallback(\n    (tooltipId = DEFAULT_TOOLTIP_ID) => ({\n      anchorRefs: anchorRefMap[tooltipId] ?? new Set(),\n      activeAnchor: activeAnchorMap[tooltipId] ?? { current: null },\n      attach: (...refs: AnchorRef[]) => attach(tooltipId, ...refs),\n      detach: (...refs: AnchorRef[]) => detach(tooltipId, ...refs),\n      setActiveAnchor: (ref: AnchorRef) => setActiveAnchor(tooltipId, ref),\n    }),\n    [anchorRefMap, activeAnchorMap, attach, detach],\n  )\n\n  const context = useMemo(() => {\n    return {\n      getTooltipData,\n    }\n  }, [getTooltipData])\n\n  return <TooltipContext.Provider value={context}>{children}</TooltipContext.Provider>\n}\n\nexport function useTooltip(tooltipId = DEFAULT_TOOLTIP_ID) {\n  return useContext(TooltipContext).getTooltipData(tooltipId)\n}\n\nexport default TooltipProvider\n","import React, { useEffect, useRef } from 'react'\nimport classNames from 'classnames'\nimport { useTooltip } from './TooltipProvider'\nimport type { ITooltipWrapper } from './TooltipProviderTypes'\n\n/**\n * @deprecated Use the `data-tooltip-id` attribute, or the `anchorSelect` prop instead.\n * See https://react-tooltip.com/docs/getting-started\n */\nconst TooltipWrapper = ({\n  tooltipId,\n  children,\n  className,\n  place,\n  content,\n  html,\n  variant,\n  offset,\n  wrapper,\n  events,\n  positionStrategy,\n  delayShow,\n  delayHide,\n}: ITooltipWrapper) => {\n  const { attach, detach } = useTooltip(tooltipId)\n  const anchorRef = useRef<HTMLElement | null>(null)\n\n  useEffect(() => {\n    attach(anchorRef)\n    return () => {\n      detach(anchorRef)\n    }\n  }, [])\n\n  return (\n    <span\n      ref={anchorRef}\n      className={classNames('react-tooltip-wrapper', className)}\n      data-tooltip-place={place}\n      data-tooltip-content={content}\n      data-tooltip-html={html}\n      data-tooltip-variant={variant}\n      data-tooltip-offset={offset}\n      data-tooltip-wrapper={wrapper}\n      data-tooltip-events={events}\n      data-tooltip-position-strategy={positionStrategy}\n      data-tooltip-delay-show={delayShow}\n      data-tooltip-delay-hide={delayHide}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport default TooltipWrapper\n","import { useLayoutEffect, useEffect } from 'react'\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default useIsomorphicLayoutEffect\n","const isScrollable = (node: Element) => {\n  if (!(node instanceof HTMLElement || node instanceof SVGElement)) {\n    return false\n  }\n  const style = getComputedStyle(node)\n  return ['overflow', 'overflow-x', 'overflow-y'].some((propertyName) => {\n    const value = style.getPropertyValue(propertyName)\n    return value === 'auto' || value === 'scroll'\n  })\n}\n\nexport const getScrollParent = (node: Element | null) => {\n  if (!node) {\n    return null\n  }\n  let currentParent = node.parentElement\n  while (currentParent) {\n    if (isScrollable(currentParent)) {\n      return currentParent\n    }\n    currentParent = currentParent.parentElement\n  }\n  return document.scrollingElement || document.documentElement\n}\n","import { computePosition, offset, shift, arrow, flip } from '@floating-ui/dom'\nimport type { IComputePositions } from './compute-positions-types'\n\nexport const computeTooltipPosition = async ({\n  elementReference = null,\n  tooltipReference = null,\n  tooltipArrowReference = null,\n  place = 'top',\n  offset: offsetValue = 10,\n  strategy = 'absolute',\n  middlewares = [\n    offset(Number(offsetValue)),\n    flip({\n      fallbackAxisSideDirection: 'start',\n    }),\n    shift({ padding: 5 }),\n  ],\n  border,\n}: IComputePositions) => {\n  if (!elementReference) {\n    // elementReference can be null or undefined and we will not compute the position\n    // eslint-disable-next-line no-console\n    // console.error('The reference element for tooltip was not defined: ', elementReference)\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  if (tooltipReference === null) {\n    return { tooltipStyles: {}, tooltipArrowStyles: {}, place }\n  }\n\n  const middleware = middlewares\n\n  if (tooltipArrowReference) {\n    middleware.push(arrow({ element: tooltipArrowReference as HTMLElement, padding: 5 }))\n\n    return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n      placement: place,\n      strategy,\n      middleware,\n    }).then(({ x, y, placement, middlewareData }) => {\n      const styles = { left: `${x}px`, top: `${y}px`, border }\n\n      const { x: arrowX, y: arrowY } = middlewareData.arrow ?? { x: 0, y: 0 }\n\n      const staticSide =\n        {\n          top: 'bottom',\n          right: 'left',\n          bottom: 'top',\n          left: 'right',\n        }[placement.split('-')[0]] ?? 'bottom'\n\n      const borderSide = border && {\n        borderBottom: border,\n        borderRight: border,\n      }\n\n      let borderWidth = 0\n      if (border) {\n        const match = `${border}`.match(/(\\d+)px/)\n        if (match?.[1]) {\n          borderWidth = Number(match[1])\n        } else {\n          /**\n           * this means `border` was set without `width`, or non-px value\n           */\n          borderWidth = 1\n        }\n      }\n\n      const arrowStyle = {\n        left: arrowX != null ? `${arrowX}px` : '',\n        top: arrowY != null ? `${arrowY}px` : '',\n        right: '',\n        bottom: '',\n        ...borderSide,\n        [staticSide]: `-${4 + borderWidth}px`,\n      }\n\n      return { tooltipStyles: styles, tooltipArrowStyles: arrowStyle, place: placement }\n    })\n  }\n\n  return computePosition(elementReference as HTMLElement, tooltipReference as HTMLElement, {\n    placement: 'bottom',\n    strategy,\n    middleware,\n  }).then(({ x, y, placement }) => {\n    const styles = { left: `${x}px`, top: `${y}px` }\n\n    return { tooltipStyles: styles, tooltipArrowStyles: {}, place: placement }\n  })\n}\n","const isObject = (object: unknown): object is Record<string, unknown> => {\n  return object !== null && typeof object === 'object'\n}\n\nexport const deepEqual = (object1: unknown, object2: unknown): boolean => {\n  if (!isObject(object1) || !isObject(object2)) {\n    return object1 === object2\n  }\n\n  const keys1 = Object.keys(object1)\n  const keys2 = Object.keys(object2)\n\n  if (keys1.length !== keys2.length) {\n    return false\n  }\n\n  return keys1.every((key) => {\n    const val1 = object1[key]\n    const val2 = object2[key]\n    if (isObject(val1) && isObject(val2)) {\n      return deepEqual(val1, val2)\n    }\n    return val1 === val2\n  })\n}\n","import React, { useEffect, useState, useRef, useCallback, useImperativeHandle } from 'react'\nimport { autoUpdate } from '@floating-ui/dom'\nimport classNames from 'classnames'\nimport debounce from 'utils/debounce'\nimport { useTooltip } from 'components/TooltipProvider'\nimport useIsomorphicLayoutEffect from 'utils/use-isomorphic-layout-effect'\nimport { getScrollParent } from 'utils/get-scroll-parent'\nimport { computeTooltipPosition } from 'utils/compute-positions'\nimport type { IComputedPosition } from 'utils/compute-positions-types'\nimport { cssTimeToMs } from 'utils/css-time-to-ms'\nimport { deepEqual } from 'utils/deep-equal'\nimport coreStyles from './core-styles.module.css'\nimport styles from './styles.module.css'\nimport type {\n  AnchorCloseEvents,\n  AnchorOpenEvents,\n  GlobalCloseEvents,\n  IPosition,\n  ITooltip,\n  TooltipImperativeOpenOptions,\n} from './TooltipTypes'\n\nconst Tooltip = ({\n  // props\n  forwardRef,\n  id,\n  className,\n  classNameArrow,\n  variant = 'dark',\n  anchorId,\n  anchorSelect,\n  place = 'top',\n  offset = 10,\n  events = ['hover'],\n  openOnClick = false,\n  positionStrategy = 'absolute',\n  middlewares,\n  wrapper: WrapperElement,\n  delayShow = 0,\n  delayHide = 0,\n  float = false,\n  hidden = false,\n  noArrow = false,\n  clickable = false,\n  closeOnEsc = false,\n  closeOnScroll = false,\n  closeOnResize = false,\n  openEvents,\n  closeEvents,\n  globalCloseEvents,\n  imperativeModeOnly,\n  style: externalStyles,\n  position,\n  afterShow,\n  afterHide,\n  // props handled by controller\n  content,\n  contentWrapperRef,\n  isOpen,\n  defaultIsOpen = false,\n  setIsOpen,\n  activeAnchor,\n  setActiveAnchor,\n  border,\n  opacity,\n  arrowColor,\n  role = 'tooltip',\n}: ITooltip) => {\n  const tooltipRef = useRef<HTMLElement>(null)\n  const tooltipArrowRef = useRef<HTMLElement>(null)\n  const tooltipShowDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const tooltipHideDelayTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const missedTransitionTimerRef = useRef<NodeJS.Timeout | null>(null)\n  const [computedPosition, setComputedPosition] = useState<IComputedPosition>({\n    tooltipStyles: {},\n    tooltipArrowStyles: {},\n    place,\n  })\n  const [show, setShow] = useState(false)\n  const [rendered, setRendered] = useState(false)\n  const [imperativeOptions, setImperativeOptions] = useState<TooltipImperativeOpenOptions | null>(\n    null,\n  )\n  const wasShowing = useRef(false)\n  const lastFloatPosition = useRef<IPosition | null>(null)\n  /**\n   * @todo Remove this in a future version (provider/wrapper method is deprecated)\n   */\n  const { anchorRefs, setActiveAnchor: setProviderActiveAnchor } = useTooltip(id)\n  const hoveringTooltip = useRef(false)\n  const [anchorsBySelect, setAnchorsBySelect] = useState<HTMLElement[]>([])\n  const mounted = useRef(false)\n\n  /**\n   * @todo Update when deprecated stuff gets removed.\n   */\n  const shouldOpenOnClick = openOnClick || events.includes('click')\n  const hasClickEvent =\n    shouldOpenOnClick || openEvents?.click || openEvents?.dblclick || openEvents?.mousedown\n  const actualOpenEvents: AnchorOpenEvents = openEvents\n    ? { ...openEvents }\n    : {\n        mouseenter: true,\n        focus: true,\n        click: false,\n        dblclick: false,\n        mousedown: false,\n      }\n  if (!openEvents && shouldOpenOnClick) {\n    Object.assign(actualOpenEvents, {\n      mouseenter: false,\n      focus: false,\n      click: true,\n    })\n  }\n  const actualCloseEvents: AnchorCloseEvents = closeEvents\n    ? { ...closeEvents }\n    : {\n        mouseleave: true,\n        blur: true,\n        click: false,\n        dblclick: false,\n        mouseup: false,\n      }\n  if (!closeEvents && shouldOpenOnClick) {\n    Object.assign(actualCloseEvents, {\n      mouseleave: false,\n      blur: false,\n    })\n  }\n  const actualGlobalCloseEvents: GlobalCloseEvents = globalCloseEvents\n    ? { ...globalCloseEvents }\n    : {\n        escape: closeOnEsc || false,\n        scroll: closeOnScroll || false,\n        resize: closeOnResize || false,\n        clickOutsideAnchor: hasClickEvent || false,\n      }\n\n  if (imperativeModeOnly) {\n    Object.assign(actualOpenEvents, {\n      mouseenter: false,\n      focus: false,\n      click: false,\n      dblclick: false,\n      mousedown: false,\n    })\n    Object.assign(actualCloseEvents, {\n      mouseleave: false,\n      blur: false,\n      click: false,\n      dblclick: false,\n      mouseup: false,\n    })\n    Object.assign(actualGlobalCloseEvents, {\n      escape: false,\n      scroll: false,\n      resize: false,\n      clickOutsideAnchor: false,\n    })\n  }\n\n  /**\n   * useLayoutEffect runs before useEffect,\n   * but should be used carefully because of caveats\n   * https://beta.reactjs.org/reference/react/useLayoutEffect#caveats\n   */\n  useIsomorphicLayoutEffect(() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  const handleShow = (value: boolean) => {\n    if (!mounted.current) {\n      return\n    }\n    if (value) {\n      setRendered(true)\n    }\n    /**\n     * wait for the component to render and calculate position\n     * before actually showing\n     */\n    setTimeout(() => {\n      if (!mounted.current) {\n        return\n      }\n      setIsOpen?.(value)\n      if (isOpen === undefined) {\n        setShow(value)\n      }\n    }, 10)\n  }\n\n  /**\n   * this replicates the effect from `handleShow()`\n   * when `isOpen` is changed from outside\n   */\n  useEffect(() => {\n    if (isOpen === undefined) {\n      return () => null\n    }\n    if (isOpen) {\n      setRendered(true)\n    }\n    const timeout = setTimeout(() => {\n      setShow(isOpen)\n    }, 10)\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [isOpen])\n\n  useEffect(() => {\n    if (show === wasShowing.current) {\n      return\n    }\n    if (missedTransitionTimerRef.current) {\n      clearTimeout(missedTransitionTimerRef.current)\n    }\n    wasShowing.current = show\n    if (show) {\n      afterShow?.()\n    } else {\n      /**\n       * see `onTransitionEnd` on tooltip wrapper\n       */\n      const style = getComputedStyle(document.body)\n      const transitionShowDelay = cssTimeToMs(style.getPropertyValue('--rt-transition-show-delay'))\n      missedTransitionTimerRef.current = setTimeout(() => {\n        /**\n         * if the tooltip switches from `show === true` to `show === false` too fast\n         * the transition never runs, so `onTransitionEnd` callback never gets fired\n         */\n        setRendered(false)\n        setImperativeOptions(null)\n        afterHide?.()\n        // +25ms just to make sure `onTransitionEnd` (if it gets fired) has time to run\n      }, transitionShowDelay + 25)\n    }\n  }, [show])\n\n  const handleComputedPosition = (newComputedPosition: IComputedPosition) => {\n    setComputedPosition((oldComputedPosition) =>\n      deepEqual(oldComputedPosition, newComputedPosition)\n        ? oldComputedPosition\n        : newComputedPosition,\n    )\n  }\n\n  const handleShowTooltipDelayed = (delay = delayShow) => {\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n\n    if (rendered) {\n      // if the tooltip is already rendered, ignore delay\n      handleShow(true)\n      return\n    }\n\n    tooltipShowDelayTimerRef.current = setTimeout(() => {\n      handleShow(true)\n    }, delay)\n  }\n\n  const handleHideTooltipDelayed = (delay = delayHide) => {\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n\n    tooltipHideDelayTimerRef.current = setTimeout(() => {\n      if (hoveringTooltip.current) {\n        return\n      }\n      handleShow(false)\n    }, delay)\n  }\n\n  const handleShowTooltip = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const target = (event.currentTarget ?? event.target) as HTMLElement | null\n    if (!target?.isConnected) {\n      /**\n       * this happens when the target is removed from the DOM\n       * at the same time the tooltip gets triggered\n       */\n      setActiveAnchor(null)\n      setProviderActiveAnchor({ current: null })\n      return\n    }\n    if (delayShow) {\n      handleShowTooltipDelayed()\n    } else {\n      handleShow(true)\n    }\n    setActiveAnchor(target)\n    setProviderActiveAnchor({ current: target })\n\n    if (tooltipHideDelayTimerRef.current) {\n      clearTimeout(tooltipHideDelayTimerRef.current)\n    }\n  }\n\n  const handleHideTooltip = () => {\n    if (clickable) {\n      // allow time for the mouse to reach the tooltip, in case there's a gap\n      handleHideTooltipDelayed(delayHide || 100)\n    } else if (delayHide) {\n      handleHideTooltipDelayed()\n    } else {\n      handleShow(false)\n    }\n\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  const handleTooltipPosition = ({ x, y }: IPosition) => {\n    const virtualElement = {\n      getBoundingClientRect() {\n        return {\n          x,\n          y,\n          width: 0,\n          height: 0,\n          top: y,\n          left: x,\n          right: x,\n          bottom: y,\n        }\n      },\n    } as Element\n    computeTooltipPosition({\n      place: imperativeOptions?.place ?? place,\n      offset,\n      elementReference: virtualElement,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      handleComputedPosition(computedStylesData)\n    })\n  }\n\n  const handlePointerMove = (event?: Event) => {\n    if (!event) {\n      return\n    }\n    const mouseEvent = event as MouseEvent\n    const mousePosition = {\n      x: mouseEvent.clientX,\n      y: mouseEvent.clientY,\n    }\n    handleTooltipPosition(mousePosition)\n    lastFloatPosition.current = mousePosition\n  }\n\n  const handleClickOutsideAnchors = (event: MouseEvent) => {\n    if (!show) {\n      return\n    }\n    const target = event.target as HTMLElement\n    if (!target.isConnected) {\n      return\n    }\n    if (tooltipRef.current?.contains(target)) {\n      return\n    }\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [anchorById, ...anchorsBySelect]\n    if (anchors.some((anchor) => anchor?.contains(target))) {\n      return\n    }\n    handleShow(false)\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n    }\n  }\n\n  // debounce handler to prevent call twice when\n  // mouse enter and focus events being triggered toggether\n  const internalDebouncedHandleShowTooltip = debounce(handleShowTooltip, 50, true)\n  const internalDebouncedHandleHideTooltip = debounce(handleHideTooltip, 50, true)\n  // If either of the functions is called while the other is still debounced,\n  // reset the timeout. Otherwise if there is a sub-50ms (leave A, enter B, leave B)\n  // sequence of events, the tooltip will stay open because the hide debounce\n  // from leave A prevented the leave B event from calling it, leaving the\n  // tooltip visible.\n  const debouncedHandleShowTooltip = (e?: Event) => {\n    internalDebouncedHandleHideTooltip.cancel()\n    internalDebouncedHandleShowTooltip(e)\n  }\n  const debouncedHandleHideTooltip = () => {\n    internalDebouncedHandleShowTooltip.cancel()\n    internalDebouncedHandleHideTooltip()\n  }\n\n  const updateTooltipPosition = useCallback(() => {\n    const actualPosition = imperativeOptions?.position ?? position\n    if (actualPosition) {\n      // if `position` is set, override regular and `float` positioning\n      handleTooltipPosition(actualPosition)\n      return\n    }\n\n    if (float) {\n      if (lastFloatPosition.current) {\n        /*\n          Without this, changes to `content`, `place`, `offset`, ..., will only\n          trigger a position calculation after a `mousemove` event.\n\n          To see why this matters, comment this line, run `yarn dev` and click the\n          \"Hover me!\" anchor.\n        */\n        handleTooltipPosition(lastFloatPosition.current)\n      }\n      // if `float` is set, override regular positioning\n      return\n    }\n\n    if (!activeAnchor?.isConnected) {\n      return\n    }\n\n    computeTooltipPosition({\n      place: imperativeOptions?.place ?? place,\n      offset,\n      elementReference: activeAnchor,\n      tooltipReference: tooltipRef.current,\n      tooltipArrowReference: tooltipArrowRef.current,\n      strategy: positionStrategy,\n      middlewares,\n      border,\n    }).then((computedStylesData) => {\n      if (!mounted.current) {\n        // invalidate computed positions after remount\n        return\n      }\n      handleComputedPosition(computedStylesData)\n    })\n  }, [\n    show,\n    activeAnchor,\n    content,\n    externalStyles,\n    place,\n    imperativeOptions?.place,\n    offset,\n    positionStrategy,\n    position,\n    imperativeOptions?.position,\n    float,\n  ])\n\n  useEffect(() => {\n    const elementRefs = new Set(anchorRefs)\n\n    anchorsBySelect.forEach((anchor) => {\n      elementRefs.add({ current: anchor })\n    })\n\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    if (anchorById) {\n      elementRefs.add({ current: anchorById })\n    }\n\n    const handleScrollResize = () => {\n      handleShow(false)\n    }\n\n    const anchorScrollParent = getScrollParent(activeAnchor)\n    const tooltipScrollParent = getScrollParent(tooltipRef.current)\n\n    if (actualGlobalCloseEvents.scroll) {\n      window.addEventListener('scroll', handleScrollResize)\n      anchorScrollParent?.addEventListener('scroll', handleScrollResize)\n      tooltipScrollParent?.addEventListener('scroll', handleScrollResize)\n    }\n    let updateTooltipCleanup: null | (() => void) = null\n    if (actualGlobalCloseEvents.resize) {\n      window.addEventListener('resize', handleScrollResize)\n    } else if (activeAnchor && tooltipRef.current) {\n      updateTooltipCleanup = autoUpdate(\n        activeAnchor as HTMLElement,\n        tooltipRef.current as HTMLElement,\n        updateTooltipPosition,\n        {\n          ancestorResize: true,\n          elementResize: true,\n          layoutShift: true,\n        },\n      )\n    }\n\n    const handleEsc = (event: KeyboardEvent) => {\n      if (event.key !== 'Escape') {\n        return\n      }\n      handleShow(false)\n    }\n    if (actualGlobalCloseEvents.escape) {\n      window.addEventListener('keydown', handleEsc)\n    }\n\n    if (actualGlobalCloseEvents.clickOutsideAnchor) {\n      window.addEventListener('click', handleClickOutsideAnchors)\n    }\n\n    const enabledEvents: { event: string; listener: (event?: Event) => void }[] = []\n\n    const handleClickOpenTooltipAnchor = (event?: Event) => {\n      if (show && event?.target === activeAnchor) {\n        /**\n         * ignore clicking the anchor that was used to open the tooltip.\n         * this avoids conflict with the click close event.\n         */\n        return\n      }\n      handleShowTooltip(event)\n    }\n    const handleClickCloseTooltipAnchor = (event?: Event) => {\n      if (!show || event?.target !== activeAnchor) {\n        /**\n         * ignore clicking the anchor that was NOT used to open the tooltip.\n         * this avoids closing the tooltip when clicking on a\n         * new anchor with the tooltip already open.\n         */\n        return\n      }\n      handleHideTooltip()\n    }\n\n    const regularEvents = ['mouseenter', 'mouseleave', 'focus', 'blur']\n    const clickEvents = ['click', 'dblclick', 'mousedown', 'mouseup']\n\n    Object.entries(actualOpenEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleShowTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickOpenTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    Object.entries(actualCloseEvents).forEach(([event, enabled]) => {\n      if (!enabled) {\n        return\n      }\n      if (regularEvents.includes(event)) {\n        enabledEvents.push({ event, listener: debouncedHandleHideTooltip })\n      } else if (clickEvents.includes(event)) {\n        enabledEvents.push({ event, listener: handleClickCloseTooltipAnchor })\n      } else {\n        // never happens\n      }\n    })\n\n    if (float) {\n      enabledEvents.push({\n        event: 'pointermove',\n        listener: handlePointerMove,\n      })\n    }\n\n    const handleMouseEnterTooltip = () => {\n      hoveringTooltip.current = true\n    }\n    const handleMouseLeaveTooltip = () => {\n      hoveringTooltip.current = false\n      handleHideTooltip()\n    }\n\n    if (clickable && !hasClickEvent) {\n      // used to keep the tooltip open when hovering content.\n      // not needed if using click events.\n      tooltipRef.current?.addEventListener('mouseenter', handleMouseEnterTooltip)\n      tooltipRef.current?.addEventListener('mouseleave', handleMouseLeaveTooltip)\n    }\n\n    enabledEvents.forEach(({ event, listener }) => {\n      elementRefs.forEach((ref) => {\n        ref.current?.addEventListener(event, listener)\n      })\n    })\n\n    return () => {\n      if (actualGlobalCloseEvents.scroll) {\n        window.removeEventListener('scroll', handleScrollResize)\n        anchorScrollParent?.removeEventListener('scroll', handleScrollResize)\n        tooltipScrollParent?.removeEventListener('scroll', handleScrollResize)\n      }\n      if (actualGlobalCloseEvents.resize) {\n        window.removeEventListener('resize', handleScrollResize)\n      } else {\n        updateTooltipCleanup?.()\n      }\n      if (actualGlobalCloseEvents.clickOutsideAnchor) {\n        window.removeEventListener('click', handleClickOutsideAnchors)\n      }\n      if (actualGlobalCloseEvents.escape) {\n        window.removeEventListener('keydown', handleEsc)\n      }\n      if (clickable && !hasClickEvent) {\n        tooltipRef.current?.removeEventListener('mouseenter', handleMouseEnterTooltip)\n        tooltipRef.current?.removeEventListener('mouseleave', handleMouseLeaveTooltip)\n      }\n      enabledEvents.forEach(({ event, listener }) => {\n        elementRefs.forEach((ref) => {\n          ref.current?.removeEventListener(event, listener)\n        })\n      })\n    }\n    /**\n     * rendered is also a dependency to ensure anchor observers are re-registered\n     * since `tooltipRef` becomes stale after removing/adding the tooltip to the DOM\n     */\n  }, [\n    activeAnchor,\n    updateTooltipPosition,\n    rendered,\n    anchorRefs,\n    anchorsBySelect,\n    // the effect uses the `actual*Events` objects, but this should work\n    openEvents,\n    closeEvents,\n    globalCloseEvents,\n    shouldOpenOnClick,\n    delayShow,\n    delayHide,\n  ])\n\n  useEffect(() => {\n    let selector = imperativeOptions?.anchorSelect ?? anchorSelect ?? ''\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    const documentObserverCallback: MutationCallback = (mutationList) => {\n      const newAnchors: HTMLElement[] = []\n      const removedAnchors: HTMLElement[] = []\n      mutationList.forEach((mutation) => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-tooltip-id') {\n          const newId = (mutation.target as HTMLElement).getAttribute('data-tooltip-id')\n          if (newId === id) {\n            newAnchors.push(mutation.target as HTMLElement)\n          } else if (mutation.oldValue === id) {\n            // data-tooltip-id has now been changed, so we need to remove this anchor\n            removedAnchors.push(mutation.target as HTMLElement)\n          }\n        }\n        if (mutation.type !== 'childList') {\n          return\n        }\n        if (activeAnchor) {\n          const elements = [...mutation.removedNodes].filter((node) => node.nodeType === 1)\n          if (selector) {\n            try {\n              removedAnchors.push(\n                // the element itself is an anchor\n                ...(elements.filter((element) =>\n                  (element as HTMLElement).matches(selector),\n                ) as HTMLElement[]),\n              )\n              removedAnchors.push(\n                // the element has children which are anchors\n                ...elements.flatMap(\n                  (element) =>\n                    [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n                ),\n              )\n            } catch {\n              /**\n               * invalid CSS selector.\n               * already warned on tooltip controller\n               */\n            }\n          }\n          elements.some((node) => {\n            if (node?.contains?.(activeAnchor)) {\n              setRendered(false)\n              handleShow(false)\n              setActiveAnchor(null)\n              if (tooltipShowDelayTimerRef.current) {\n                clearTimeout(tooltipShowDelayTimerRef.current)\n              }\n              if (tooltipHideDelayTimerRef.current) {\n                clearTimeout(tooltipHideDelayTimerRef.current)\n              }\n              return true\n            }\n            return false\n          })\n        }\n        if (!selector) {\n          return\n        }\n        try {\n          const elements = [...mutation.addedNodes].filter((node) => node.nodeType === 1)\n          newAnchors.push(\n            // the element itself is an anchor\n            ...(elements.filter((element) =>\n              (element as HTMLElement).matches(selector),\n            ) as HTMLElement[]),\n          )\n          newAnchors.push(\n            // the element has children which are anchors\n            ...elements.flatMap(\n              (element) =>\n                [...(element as HTMLElement).querySelectorAll(selector)] as HTMLElement[],\n            ),\n          )\n        } catch {\n          /**\n           * invalid CSS selector.\n           * already warned on tooltip controller\n           */\n        }\n      })\n      if (newAnchors.length || removedAnchors.length) {\n        setAnchorsBySelect((anchors) => [\n          ...anchors.filter((anchor) => !removedAnchors.includes(anchor)),\n          ...newAnchors,\n        ])\n      }\n    }\n    const documentObserver = new MutationObserver(documentObserverCallback)\n    // watch for anchor being removed from the DOM\n    documentObserver.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['data-tooltip-id'],\n      // to track the prev value if we need to remove anchor when data-tooltip-id gets changed\n      attributeOldValue: true,\n    })\n    return () => {\n      documentObserver.disconnect()\n    }\n  }, [id, anchorSelect, imperativeOptions?.anchorSelect, activeAnchor])\n\n  useEffect(() => {\n    updateTooltipPosition()\n  }, [updateTooltipPosition])\n\n  useEffect(() => {\n    if (!contentWrapperRef?.current) {\n      return () => null\n    }\n    const contentObserver = new ResizeObserver(() => {\n      setTimeout(() => updateTooltipPosition())\n    })\n    contentObserver.observe(contentWrapperRef.current)\n    return () => {\n      contentObserver.disconnect()\n    }\n  }, [content, contentWrapperRef?.current])\n\n  useEffect(() => {\n    const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n    const anchors = [...anchorsBySelect, anchorById]\n    if (!activeAnchor || !anchors.includes(activeAnchor)) {\n      /**\n       * if there is no active anchor,\n       * or if the current active anchor is not amongst the allowed ones,\n       * reset it\n       */\n      setActiveAnchor(anchorsBySelect[0] ?? anchorById)\n    }\n  }, [anchorId, anchorsBySelect, activeAnchor])\n\n  useEffect(() => {\n    if (defaultIsOpen) {\n      handleShow(true)\n    }\n    return () => {\n      if (tooltipShowDelayTimerRef.current) {\n        clearTimeout(tooltipShowDelayTimerRef.current)\n      }\n      if (tooltipHideDelayTimerRef.current) {\n        clearTimeout(tooltipHideDelayTimerRef.current)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    let selector = imperativeOptions?.anchorSelect ?? anchorSelect\n    if (!selector && id) {\n      selector = `[data-tooltip-id='${id}']`\n    }\n    if (!selector) {\n      return\n    }\n    try {\n      const anchors = Array.from(document.querySelectorAll<HTMLElement>(selector))\n      setAnchorsBySelect(anchors)\n    } catch {\n      // warning was already issued in the controller\n      setAnchorsBySelect([])\n    }\n  }, [id, anchorSelect, imperativeOptions?.anchorSelect])\n\n  useEffect(() => {\n    if (tooltipShowDelayTimerRef.current) {\n      clearTimeout(tooltipShowDelayTimerRef.current)\n      handleShowTooltipDelayed(delayShow)\n    }\n  }, [delayShow])\n\n  const actualContent = imperativeOptions?.content ?? content\n  const canShow = show && Object.keys(computedPosition.tooltipStyles).length > 0\n\n  useImperativeHandle(forwardRef, () => ({\n    open: (options) => {\n      if (options?.anchorSelect) {\n        try {\n          document.querySelector(options.anchorSelect)\n        } catch {\n          if (!process.env.NODE_ENV || process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn(`[react-tooltip] \"${options.anchorSelect}\" is not a valid CSS selector`)\n          }\n          return\n        }\n      }\n      setImperativeOptions(options ?? null)\n      if (options?.delay) {\n        handleShowTooltipDelayed(options.delay)\n      } else {\n        handleShow(true)\n      }\n    },\n    close: (options) => {\n      if (options?.delay) {\n        handleHideTooltipDelayed(options.delay)\n      } else {\n        handleShow(false)\n      }\n    },\n    activeAnchor,\n    place: computedPosition.place,\n    isOpen: Boolean(rendered && !hidden && actualContent && canShow),\n  }))\n\n  return rendered && !hidden && actualContent ? (\n    <WrapperElement\n      id={id}\n      role={role}\n      className={classNames(\n        'react-tooltip',\n        coreStyles['tooltip'],\n        styles['tooltip'],\n        styles[variant],\n        className,\n        `react-tooltip__place-${computedPosition.place}`,\n        coreStyles[canShow ? 'show' : 'closing'],\n        canShow ? 'react-tooltip__show' : 'react-tooltip__closing',\n        positionStrategy === 'fixed' && coreStyles['fixed'],\n        clickable && coreStyles['clickable'],\n      )}\n      onTransitionEnd={(event: TransitionEvent) => {\n        if (missedTransitionTimerRef.current) {\n          clearTimeout(missedTransitionTimerRef.current)\n        }\n        if (show || event.propertyName !== 'opacity') {\n          return\n        }\n        setRendered(false)\n        setImperativeOptions(null)\n        afterHide?.()\n      }}\n      style={{\n        ...externalStyles,\n        ...computedPosition.tooltipStyles,\n        opacity: opacity !== undefined && canShow ? opacity : undefined,\n      }}\n      ref={tooltipRef}\n    >\n      {actualContent}\n      <WrapperElement\n        className={classNames(\n          'react-tooltip-arrow',\n          coreStyles['arrow'],\n          styles['arrow'],\n          classNameArrow,\n          noArrow && coreStyles['noArrow'],\n        )}\n        style={{\n          ...computedPosition.tooltipArrowStyles,\n          background: arrowColor\n            ? `linear-gradient(to right bottom, transparent 50%, ${arrowColor} 50%)`\n            : undefined,\n        }}\n        ref={tooltipArrowRef}\n      />\n    </WrapperElement>\n  ) : null\n}\n\nexport default Tooltip\n","export const cssTimeToMs = (time: string): number => {\n  const match = time.match(/^([\\d.]+)(m?s?)$/)\n  if (!match) {\n    return 0\n  }\n  const [, amount, unit] = match\n  if (unit !== 's' && unit !== 'ms') {\n    return 0\n  }\n  return Number(amount) * (unit === 'ms' ? 1 : 1000)\n}\n","/* eslint-disable react/no-danger */\nimport React from 'react'\nimport type { ITooltipContent } from './TooltipContentTypes'\n\nconst TooltipContent = ({ content }: ITooltipContent) => {\n  return <span dangerouslySetInnerHTML={{ __html: content }} />\n}\n\nexport default TooltipContent\n","const cssSupports = (property: string, value: string): boolean => {\n  const hasCssSupports = 'CSS' in window && 'supports' in window.CSS\n  return hasCssSupports ? window.CSS.supports(property, value) : true\n}\n\nexport default cssSupports\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Tooltip } from 'components/Tooltip'\nimport type {\n  EventsType,\n  PositionStrategy,\n  PlacesType,\n  VariantType,\n  WrapperType,\n  DataAttribute,\n  ITooltip,\n  ChildrenType,\n  TooltipRefProps,\n} from 'components/Tooltip/TooltipTypes'\nimport { useTooltip } from 'components/TooltipProvider'\nimport { TooltipContent } from 'components/TooltipContent'\nimport cssSupports from 'utils/css-supports'\nimport classNames from 'classnames'\nimport type { ITooltipController } from './TooltipControllerTypes'\n\nconst TooltipController = React.forwardRef<TooltipRefProps, ITooltipController>(\n  (\n    {\n      id,\n      anchorId,\n      anchorSelect,\n      content,\n      html,\n      render,\n      className,\n      classNameArrow,\n      variant = 'dark',\n      place = 'top',\n      offset = 10,\n      wrapper = 'div',\n      children = null,\n      events = ['hover'],\n      openOnClick = false,\n      positionStrategy = 'absolute',\n      middlewares,\n      delayShow = 0,\n      delayHide = 0,\n      float = false,\n      hidden = false,\n      noArrow = false,\n      clickable = false,\n      closeOnEsc = false,\n      closeOnScroll = false,\n      closeOnResize = false,\n      openEvents,\n      closeEvents,\n      globalCloseEvents,\n      imperativeModeOnly = false,\n      style,\n      position,\n      isOpen,\n      defaultIsOpen = false,\n      disableStyleInjection = false,\n      border,\n      opacity,\n      arrowColor,\n      setIsOpen,\n      afterShow,\n      afterHide,\n      role = 'tooltip',\n    }: ITooltipController,\n    ref,\n  ) => {\n    const [tooltipContent, setTooltipContent] = useState(content)\n    const [tooltipHtml, setTooltipHtml] = useState(html)\n    const [tooltipPlace, setTooltipPlace] = useState(place)\n    const [tooltipVariant, setTooltipVariant] = useState(variant)\n    const [tooltipOffset, setTooltipOffset] = useState(offset)\n    const [tooltipDelayShow, setTooltipDelayShow] = useState(delayShow)\n    const [tooltipDelayHide, setTooltipDelayHide] = useState(delayHide)\n    const [tooltipFloat, setTooltipFloat] = useState(float)\n    const [tooltipHidden, setTooltipHidden] = useState(hidden)\n    const [tooltipWrapper, setTooltipWrapper] = useState<WrapperType>(wrapper)\n    const [tooltipEvents, setTooltipEvents] = useState(events)\n    const [tooltipPositionStrategy, setTooltipPositionStrategy] = useState(positionStrategy)\n    const [tooltipClassName, setTooltipClassName] = useState<string | null>(null)\n    const [activeAnchor, setActiveAnchor] = useState<HTMLElement | null>(null)\n    const styleInjectionRef = useRef(disableStyleInjection)\n    /**\n     * @todo Remove this in a future version (provider/wrapper method is deprecated)\n     */\n    const { anchorRefs, activeAnchor: providerActiveAnchor } = useTooltip(id)\n\n    const getDataAttributesFromAnchorElement = (elementReference: HTMLElement) => {\n      const dataAttributes = elementReference?.getAttributeNames().reduce((acc, name) => {\n        if (name.startsWith('data-tooltip-')) {\n          const parsedAttribute = name.replace(/^data-tooltip-/, '') as DataAttribute\n          acc[parsedAttribute] = elementReference?.getAttribute(name) ?? null\n        }\n        return acc\n      }, {} as Record<DataAttribute, string | null>)\n\n      return dataAttributes\n    }\n\n    const applyAllDataAttributesFromAnchorElement = (\n      dataAttributes: Record<string, string | null>,\n    ) => {\n      const handleDataAttributes: Record<DataAttribute, (value: string | null) => void> = {\n        place: (value) => {\n          setTooltipPlace((value as PlacesType) ?? place)\n        },\n        content: (value) => {\n          setTooltipContent(value ?? content)\n        },\n        html: (value) => {\n          setTooltipHtml(value ?? html)\n        },\n        variant: (value) => {\n          setTooltipVariant((value as VariantType) ?? variant)\n        },\n        offset: (value) => {\n          setTooltipOffset(value === null ? offset : Number(value))\n        },\n        wrapper: (value) => {\n          setTooltipWrapper((value as WrapperType) ?? wrapper)\n        },\n        events: (value) => {\n          const parsed = value?.split(' ') as EventsType[]\n          setTooltipEvents(parsed ?? events)\n        },\n        'position-strategy': (value) => {\n          setTooltipPositionStrategy((value as PositionStrategy) ?? positionStrategy)\n        },\n        'delay-show': (value) => {\n          setTooltipDelayShow(value === null ? delayShow : Number(value))\n        },\n        'delay-hide': (value) => {\n          setTooltipDelayHide(value === null ? delayHide : Number(value))\n        },\n        float: (value) => {\n          setTooltipFloat(value === null ? float : value === 'true')\n        },\n        hidden: (value) => {\n          setTooltipHidden(value === null ? hidden : value === 'true')\n        },\n        'class-name': (value) => {\n          setTooltipClassName(value)\n        },\n      }\n      // reset unset data attributes to default values\n      // without this, data attributes from the last active anchor will still be used\n      Object.values(handleDataAttributes).forEach((handler) => handler(null))\n      Object.entries(dataAttributes).forEach(([key, value]) => {\n        handleDataAttributes[key as DataAttribute]?.(value)\n      })\n    }\n\n    useEffect(() => {\n      setTooltipContent(content)\n    }, [content])\n\n    useEffect(() => {\n      setTooltipHtml(html)\n    }, [html])\n\n    useEffect(() => {\n      setTooltipPlace(place)\n    }, [place])\n\n    useEffect(() => {\n      setTooltipVariant(variant)\n    }, [variant])\n\n    useEffect(() => {\n      setTooltipOffset(offset)\n    }, [offset])\n\n    useEffect(() => {\n      setTooltipDelayShow(delayShow)\n    }, [delayShow])\n\n    useEffect(() => {\n      setTooltipDelayHide(delayHide)\n    }, [delayHide])\n\n    useEffect(() => {\n      setTooltipFloat(float)\n    }, [float])\n\n    useEffect(() => {\n      setTooltipHidden(hidden)\n    }, [hidden])\n\n    useEffect(() => {\n      setTooltipPositionStrategy(positionStrategy)\n    }, [positionStrategy])\n\n    useEffect(() => {\n      if (styleInjectionRef.current === disableStyleInjection) {\n        return\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not change `disableStyleInjection` dynamically.')\n      }\n    }, [disableStyleInjection])\n\n    useEffect(() => {\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(\n          new CustomEvent('react-tooltip-inject-styles', {\n            detail: {\n              disableCore: disableStyleInjection === 'core',\n              disableBase: disableStyleInjection,\n            },\n          }),\n        )\n      }\n    }, [])\n\n    useEffect(() => {\n      const elementRefs = new Set(anchorRefs)\n\n      let selector = anchorSelect\n      if (!selector && id) {\n        selector = `[data-tooltip-id='${id}']`\n      }\n      if (selector) {\n        try {\n          const anchorsBySelect = document.querySelectorAll<HTMLElement>(selector)\n          anchorsBySelect.forEach((anchor) => {\n            elementRefs.add({ current: anchor })\n          })\n        } catch {\n          if (!process.env.NODE_ENV || process.env.NODE_ENV !== 'production') {\n            // eslint-disable-next-line no-console\n            console.warn(`[react-tooltip] \"${selector}\" is not a valid CSS selector`)\n          }\n        }\n      }\n\n      const anchorById = document.querySelector<HTMLElement>(`[id='${anchorId}']`)\n      if (anchorById) {\n        elementRefs.add({ current: anchorById })\n      }\n\n      if (!elementRefs.size) {\n        return () => null\n      }\n\n      const anchorElement = activeAnchor ?? anchorById ?? providerActiveAnchor.current\n\n      const observerCallback: MutationCallback = (mutationList) => {\n        mutationList.forEach((mutation) => {\n          if (\n            !anchorElement ||\n            mutation.type !== 'attributes' ||\n            !mutation.attributeName?.startsWith('data-tooltip-')\n          ) {\n            return\n          }\n          // make sure to get all set attributes, since all unset attributes are reset\n          const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n          applyAllDataAttributesFromAnchorElement(dataAttributes)\n        })\n      }\n\n      // Create an observer instance linked to the callback function\n      const observer = new MutationObserver(observerCallback)\n\n      // do not check for subtree and childrens, we only want to know attribute changes\n      // to stay watching `data-attributes-*` from anchor element\n      const observerConfig = { attributes: true, childList: false, subtree: false }\n\n      if (anchorElement) {\n        const dataAttributes = getDataAttributesFromAnchorElement(anchorElement)\n        applyAllDataAttributesFromAnchorElement(dataAttributes)\n        // Start observing the target node for configured mutations\n        observer.observe(anchorElement, observerConfig)\n      }\n\n      return () => {\n        // Remove the observer when the tooltip is destroyed\n        observer.disconnect()\n      }\n    }, [anchorRefs, providerActiveAnchor, activeAnchor, anchorId, anchorSelect])\n\n    useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return\n      }\n      if (style?.border) {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not set `style.border`. Use `border` prop instead.')\n      }\n      if (border && !cssSupports('border', `${border}`)) {\n        // eslint-disable-next-line no-console\n        console.warn(`[react-tooltip] \"${border}\" is not a valid \\`border\\`.`)\n      }\n      if (style?.opacity) {\n        // eslint-disable-next-line no-console\n        console.warn('[react-tooltip] Do not set `style.opacity`. Use `opacity` prop instead.')\n      }\n      if (opacity && !cssSupports('opacity', `${opacity}`)) {\n        // eslint-disable-next-line no-console\n        console.warn(`[react-tooltip] \"${opacity}\" is not a valid \\`opacity\\`.`)\n      }\n    }, [])\n\n    /**\n     * content priority: children < render or content < html\n     * children should be lower priority so that it can be used as the \"default\" content\n     */\n    let renderedContent: ChildrenType = children\n    const contentWrapperRef = useRef<HTMLDivElement>(null)\n    if (render) {\n      const actualContent =\n        activeAnchor?.getAttribute('data-tooltip-content') || tooltipContent || null\n      const rendered = render({ content: actualContent, activeAnchor }) as React.ReactNode\n      renderedContent = rendered ? (\n        <div ref={contentWrapperRef} className=\"react-tooltip-content-wrapper\">\n          {rendered}\n        </div>\n      ) : null\n    } else if (tooltipContent) {\n      renderedContent = tooltipContent\n    }\n    if (tooltipHtml) {\n      renderedContent = <TooltipContent content={tooltipHtml} />\n    }\n\n    const props: ITooltip = {\n      forwardRef: ref,\n      id,\n      anchorId,\n      anchorSelect,\n      className: classNames(className, tooltipClassName),\n      classNameArrow,\n      content: renderedContent,\n      contentWrapperRef,\n      place: tooltipPlace,\n      variant: tooltipVariant,\n      offset: tooltipOffset,\n      wrapper: tooltipWrapper,\n      events: tooltipEvents,\n      openOnClick,\n      positionStrategy: tooltipPositionStrategy,\n      middlewares,\n      delayShow: tooltipDelayShow,\n      delayHide: tooltipDelayHide,\n      float: tooltipFloat,\n      hidden: tooltipHidden,\n      noArrow,\n      clickable,\n      closeOnEsc,\n      closeOnScroll,\n      closeOnResize,\n      openEvents,\n      closeEvents,\n      globalCloseEvents,\n      imperativeModeOnly,\n      style,\n      position,\n      isOpen,\n      defaultIsOpen,\n      border,\n      opacity,\n      arrowColor,\n      setIsOpen,\n      afterShow,\n      afterHide,\n      activeAnchor,\n      setActiveAnchor: (anchor: HTMLElement | null) => setActiveAnchor(anchor),\n      role,\n    }\n\n    return <Tooltip {...props} />\n  },\n)\n\nexport default TooltipController\n","import './tokens.css'\n\nimport { injectStyle } from 'utils/handle-style'\n\nimport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  IPosition,\n  Middleware,\n  TooltipRefProps,\n} from './components/Tooltip/TooltipTypes'\nimport type { ITooltipController } from './components/TooltipController/TooltipControllerTypes'\nimport type { ITooltipWrapper } from './components/TooltipProvider/TooltipProviderTypes'\n\n// those content will be replaced in build time with the `react-tooltip.css` builded content\nconst TooltipCoreStyles = 'react-tooltip-core-css-placeholder'\nconst TooltipStyles = 'react-tooltip-css-placeholder'\n\nif (typeof window !== 'undefined') {\n  window.addEventListener('react-tooltip-inject-styles', ((\n    event: CustomEvent<{ disableCore: boolean; disableBase: boolean }>,\n  ) => {\n    if (!event.detail.disableCore) {\n      injectStyle({ css: TooltipCoreStyles, type: 'core' })\n    }\n    if (!event.detail.disableBase) {\n      injectStyle({ css: TooltipStyles, type: 'base' })\n    }\n  }) as EventListener)\n}\n\nexport { TooltipController as Tooltip } from './components/TooltipController'\nexport { TooltipProvider, TooltipWrapper } from './components/TooltipProvider'\nexport type {\n  ChildrenType,\n  DataAttribute,\n  EventsType,\n  PlacesType,\n  PositionStrategy,\n  VariantType,\n  WrapperType,\n  ITooltipController as ITooltip,\n  ITooltipWrapper,\n  IPosition,\n  Middleware,\n  TooltipRefProps,\n}\n\nexport { removeStyle } from './utils/handle-style'\n"],"names":["REACT_TOOLTIP_CORE_STYLES_ID","REACT_TOOLTIP_BASE_STYLES_ID","injected","core","base","injectStyle","css","id","type","ref","document","process","_a","env","REACT_TOOLTIP_DISABLE_CORE_STYLES","_b","REACT_TOOLTIP_DISABLE_BASE_STYLES","insertAt","getElementById","console","warn","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","removeStyle","tagName","remove","debounce","func","wait","immediate","timeout","debounced","args","later","apply","this","setTimeout","clearTimeout","cancel","DEFAULT_TOOLTIP_ID","DEFAULT_CONTEXT_DATA","anchorRefs","Set","activeAnchor","current","attach","detach","setActiveAnchor","TooltipContext","createContext","getTooltipData","TooltipProvider","children","anchorRefMap","setAnchorRefMap","useState","activeAnchorMap","setActiveAnchorMap","tooltipId","refs","oldMap","tooltipRefs","forEach","add","delete","useCallback","context","useMemo","React","Provider","value","useTooltip","useContext","TooltipWrapper","className","place","content","html","variant","offset","wrapper","events","positionStrategy","delayShow","delayHide","anchorRef","useRef","useEffect","classNames","useIsomorphicLayoutEffect","window","useLayoutEffect","isScrollable","node","HTMLElement","SVGElement","getComputedStyle","some","propertyName","getPropertyValue","getScrollParent","currentParent","parentElement","scrollingElement","documentElement","computeTooltipPosition","async","elementReference","tooltipReference","tooltipArrowReference","offsetValue","strategy","middlewares","Number","flip","fallbackAxisSideDirection","shift","padding","border","tooltipStyles","tooltipArrowStyles","middleware","push","arrow","element","computePosition","placement","then","x","y","middlewareData","styles","left","top","arrowX","arrowY","staticSide","right","bottom","split","borderSide","borderBottom","borderRight","borderWidth","match","isObject","object","deepEqual","object1","object2","keys1","Object","keys","keys2","length","every","key","val1","val2","Tooltip","forwardRef","classNameArrow","anchorId","anchorSelect","openOnClick","WrapperElement","float","hidden","noArrow","clickable","closeOnEsc","closeOnScroll","closeOnResize","openEvents","closeEvents","globalCloseEvents","imperativeModeOnly","externalStyles","position","afterShow","afterHide","contentWrapperRef","isOpen","defaultIsOpen","setIsOpen","opacity","arrowColor","role","tooltipRef","tooltipArrowRef","tooltipShowDelayTimerRef","tooltipHideDelayTimerRef","missedTransitionTimerRef","computedPosition","setComputedPosition","show","setShow","rendered","setRendered","imperativeOptions","setImperativeOptions","wasShowing","lastFloatPosition","setProviderActiveAnchor","hoveringTooltip","anchorsBySelect","setAnchorsBySelect","mounted","shouldOpenOnClick","includes","hasClickEvent","click","dblclick","mousedown","actualOpenEvents","mouseenter","focus","assign","actualCloseEvents","mouseleave","blur","mouseup","actualGlobalCloseEvents","escape","scroll","resize","clickOutsideAnchor","handleShow","undefined","transitionShowDelay","time","amount","unit","cssTimeToMs","body","handleComputedPosition","newComputedPosition","oldComputedPosition","handleShowTooltipDelayed","delay","handleHideTooltipDelayed","handleShowTooltip","event","target","currentTarget","isConnected","handleHideTooltip","handleTooltipPosition","virtualElement","getBoundingClientRect","width","height","computedStylesData","handlePointerMove","mouseEvent","mousePosition","clientX","clientY","handleClickOutsideAnchors","contains","querySelector","anchor","internalDebouncedHandleShowTooltip","internalDebouncedHandleHideTooltip","debouncedHandleShowTooltip","e","debouncedHandleHideTooltip","updateTooltipPosition","actualPosition","elementRefs","anchorById","handleScrollResize","anchorScrollParent","tooltipScrollParent","addEventListener","updateTooltipCleanup","autoUpdate","ancestorResize","elementResize","layoutShift","handleEsc","enabledEvents","handleClickOpenTooltipAnchor","handleClickCloseTooltipAnchor","regularEvents","clickEvents","entries","enabled","listener","handleMouseEnterTooltip","handleMouseLeaveTooltip","removeEventListener","selector","documentObserver","MutationObserver","mutationList","newAnchors","removedAnchors","mutation","attributeName","getAttribute","oldValue","elements","removedNodes","filter","nodeType","matches","flatMap","querySelectorAll","call","addedNodes","anchors","observe","childList","subtree","attributes","attributeFilter","attributeOldValue","disconnect","contentObserver","ResizeObserver","Array","from","actualContent","canShow","useImperativeHandle","open","options","close","Boolean","coreStyles","onTransitionEnd","background","TooltipContent","dangerouslySetInnerHTML","__html","cssSupports","property","CSS","supports","TooltipController","render","disableStyleInjection","tooltipContent","setTooltipContent","tooltipHtml","setTooltipHtml","tooltipPlace","setTooltipPlace","tooltipVariant","setTooltipVariant","tooltipOffset","setTooltipOffset","tooltipDelayShow","setTooltipDelayShow","tooltipDelayHide","setTooltipDelayHide","tooltipFloat","setTooltipFloat","tooltipHidden","setTooltipHidden","tooltipWrapper","setTooltipWrapper","tooltipEvents","setTooltipEvents","tooltipPositionStrategy","setTooltipPositionStrategy","tooltipClassName","setTooltipClassName","styleInjectionRef","providerActiveAnchor","getDataAttributesFromAnchorElement","getAttributeNames","reduce","acc","name","startsWith","replace","applyAllDataAttributesFromAnchorElement","dataAttributes","handleDataAttributes","parsed","values","handler","dispatchEvent","CustomEvent","detail","disableCore","disableBase","size","anchorElement","observer","observerConfig","renderedContent","props"],"mappings":"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"}